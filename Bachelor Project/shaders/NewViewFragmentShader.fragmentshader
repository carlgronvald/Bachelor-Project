#version 330 core
#define VIEWNUM 10
#define FACTOR 0.99609375

in vec3 vColor;
in vec2 vertexxy;
in vec3 vertexnormal;


in float angles[VIEWNUM];
in float vertexz;
in float vertexw;

uniform sampler2D externalTexture[VIEWNUM];
uniform sampler2D colmapDepth[VIEWNUM];
uniform float minDepth[VIEWNUM];
uniform float maxDepth[VIEWNUM];
uniform sampler2D confidenceTexture[VIEWNUM];
uniform mat4 viewMVP[VIEWNUM];
uniform mat4 MVP;

uniform int screenWidth;
uniform int screenHeight;
uniform float kt;
uniform float kc;
uniform float kdist;
//For round points
uniform float pointSize;

out vec4 color;


float cameraDepth(vec4 tex, int i) {
	return dot(tex, vec4(FACTOR/16777216,FACTOR/65536,FACTOR/256,FACTOR)) * (maxDepth[i]-minDepth[i])+minDepth[i];
}

float weight(float x, float c) { //Returns the weighing of a view given angle and shadow map confidence
	return (-x*x*kt - c*c*kc);
}



void main() {
	vec2 screenxy = vec2(gl_FragCoord.x / screenWidth, gl_FragCoord.y / screenHeight); //Fragment xy
	vec2 pixeldiff = (screenxy-vertexxy)*vec2(screenWidth, screenHeight);
	if(dot(pixeldiff, pixeldiff) > pointSize*pointSize/4) {
		discard;
	}


	vec4 modelspace;
	modelspace = vec4((screenxy*2-vec2(1))*vertexw, vertexz, vertexw);
	modelspace = inverse(MVP) * modelspace;
	float totalViewPart;
	int bestPart = -1;
	float bestWeight = -1000000000;
	vec4 viewPos;
	float d,c;
	
	for(int i=0;i<VIEWNUM;i++) {
	
		viewPos = viewMVP[i] * modelspace;

		float x = angles[i];

		c = texture(confidenceTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2).x;

		d = abs(cameraDepth(texture(colmapDepth[i], (viewPos.xy/viewPos.w+vec2(1))/2),i) - viewPos.w);

		if(weight(x,c) > bestWeight && abs(viewPos.x/viewPos.w*viewPos.x/viewPos.w) < 1 && abs(viewPos.y/viewPos.w*viewPos.y/viewPos.w) < 1 && d*kdist < 1) {
			bestPart = i;
			bestWeight = weight(x,c);
		}
	}
	if(bestPart != -1) {
		viewPos = viewMVP[bestPart] * modelspace;
		color = texture(externalTexture[bestPart], (viewPos.xy/viewPos.w+vec2(1))/2);
	} else {
		color = vec4(vColor,1);
	}
	viewPos = viewMVP[0] * modelspace;
}