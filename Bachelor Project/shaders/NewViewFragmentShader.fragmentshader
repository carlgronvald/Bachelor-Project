#version 330 core

in vec3 vColor;
in vec2 vertexxy;


in float angles[5];
in float distances[5];
in float vertexz;
in float vertexw;

uniform sampler2D externalTexture[5];
uniform sampler2D depthTexture[5];
uniform sampler2D colmapDepth[5];
uniform sampler2D confidenceTexture[5];
uniform mat4 viewMVP[5];
uniform mat4 MVP;

uniform int screenWidth;
uniform int screenHeight;
uniform float kt;
uniform float kc;
uniform float kdist;

out vec4 color;


float cameraDepth(vec4 tex, int i) {
	return dot(tex, vec4(1,256,65536,16777216))/16777216.0*2;
}

float weight(float x, float c) { //Returns the weighing of a view given squared distance, angle, and shadow map confidence
	return exp((-x*x*kt - c*c*kc));
}
float near = 0.1; 
float far  = 100.0; 
  
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}



void main() {
	

	vec2 screenxy = vec2(gl_FragCoord.x / screenWidth, gl_FragCoord.y / screenHeight); //Fragment xy


	vec4 modelspace;
	modelspace = vec4((screenxy*2-vec2(1))*vertexw, vertexz, vertexw);
	modelspace = inverse(MVP) * modelspace;
	float totalViewPart;
	float viewParts[5];
	vec4 viewPos;
	float d,c;
	color = vec4(0,1,0,1);
	for(int i=0;i<5;i++) {
	
		viewPos = viewMVP[i] * modelspace;

		float x = angles[i];

		c = texture(confidenceTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2).x;

		//d = abs(cameraDepth( texture(depthTexture[i], (viewPos.xy/viewPos.z+vec2(1))/2), i ) - viewPos.z); 
		
		viewParts[i] = clamp( weight(x, c)  - pow(  viewPos.x/viewPos.w*viewPos.x/viewPos.w, 64) - pow(viewPos.y/viewPos.w*viewPos.y/viewPos.w, 64)  - pow(distances[i]*kdist,64)  ,0,1);
		totalViewPart += viewParts[i];
	}
	
	//color = vec4(0,1,0,1);
	
	for(int i=0;i<5;i++) {
		viewParts[i] = clamp(viewParts[i]/totalViewPart, 0, 1);
	}
	

	vec4 tcolor = vec4(0);
	float vt=0;

	//float tdepth = 0;
	for(int i=0;i<5;i++) {
		viewPos = viewMVP[i] * modelspace;
		tcolor += texture(externalTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2)*viewParts[i];
		//tdepth += cameraDepth(texture(colmapDepth[i], dUV[i]*(screenxy-vertexxy)+UVs[i]), i)*viewParts[i];
		vt += viewParts[i];
	}


	vt = clamp(vt,0,1);
	tcolor.w = 1;
	color = (tcolor*vt + vec4(vColor,1)*(1.0-vt))*1;

	
	//viewPos = viewMVP[0] * modelspace;
	//d = abs(LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).x ) - viewPos.w*1.1); 
	//color = vec4(0,distances[0],0,1);

	//color = vec4(0, viewParts[2], 0,1);

	//color = (tcolor*vt + vec4(vColor,1)*(1.0-vt))*0.9*tdepth + vec4(vt, 1-vt, vt, 1)*0.1;
	//color = (tcolor*vt + vec4(vColor,1)*(1.0-vt))*0.9 + vec4(vt,1-vt,vt,1)*0.1;
	//color = vec4(abs(d-dd),0,0,1);
	//color = vec4(abs(d));
	//color = vec4(dUV[0][0][0], dUV[0][0][1], 1,1);
	//color = vec4(vColor,1);
}