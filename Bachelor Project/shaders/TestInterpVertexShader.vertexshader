#version 330 core

layout(location=0) in vec3 vertexPosition_modelspace;
layout(location=1) in vec3 color;
layout(location=2) in vec3 normal;

out vec2 UV;
out vec2 UV2;
out vec3 vColor;
out mat2 dUV;
out mat2 dUV2;
out vec2 vertexxy;
out vec2 viewParts;
out vec3 vNormal;

uniform mat4 MVP;
uniform mat4 viewMVP;
uniform mat4 viewMVP2;

uniform vec3 viewDir;
uniform vec3 viewDir2;

//uniform vec3 cameraPos;
//uniform vec3 extUp;

void main() {
	gl_Position = MVP * vec4(vertexPosition_modelspace, 1);

	vNormal = normal;
	//viewParts = vec2( viewDir[0], viewDir2[0] );
	viewParts = normalize(vec2( clamp( dot(normal, viewDir) ,0.05,1.0), clamp( dot(normal, viewDir2),0.05,1.0) ));

	vec2 pos = (gl_Position.xy/gl_Position.w); //This is the screen position in the [-1,1] square.

	vec2 maxXPos = pos.xy+vec2(1.0,0);
	vec2 maxYPos = pos.xy+vec2(0,1.0);
	vec4 maxXdpos = inverse(MVP) * vec4(maxXPos*gl_Position.w, gl_Position.z, gl_Position.w);
	vec4 maxYdpos = inverse(MVP) * vec4(maxYPos*gl_Position.w, gl_Position.z, gl_Position.w);
	
	vec4 dxview = viewMVP * maxXdpos;
	vec4 dyview = viewMVP * maxYdpos;
	
	vec4 viewPos = viewMVP * vec4(vertexPosition_modelspace,1);
	vec2 dUVx = (dxview.xy/dxview.w)-viewPos.xy/viewPos.w;
	vec2 dUVy = (dyview.xy/dyview.w)-viewPos.xy/viewPos.w;

	dUV = mat2(	dUVx, dUVy );
	UV = ((viewPos.xy/viewPos.w)+vec2(1,1))/2; // Find the location in the top view camera.

	dxview = viewMVP2 * maxXdpos;
	dyview = viewMVP2 * maxYdpos;
	
	viewPos = viewMVP2 * vec4(vertexPosition_modelspace,1);
	dUVx = (dxview.xy/dxview.w)-viewPos.xy/viewPos.w;
	dUVy = (dyview.xy/dyview.w)-viewPos.xy/viewPos.w;

	dUV2 = mat2(dUVx, dUVy );
	UV2 = ((viewPos.xy/viewPos.w)+vec2(1,1))/2; // Find the location in the top view camera.

	vertexxy = (pos+vec2(1))/2;


	vColor = color;
}