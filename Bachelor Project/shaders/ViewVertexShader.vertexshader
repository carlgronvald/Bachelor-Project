#version 330 core

layout(location=0) in vec3 vertexPosition_modelspace;
layout(location=1) in vec3 color;
layout(location=2) in vec3 normal;

out vec2 UVs[5];
out vec3 vColor;
out mat2 dUV[5];
out vec2 vertexxy;
out float viewParts[5];

uniform mat4 MVP;
uniform mat4 viewMVP[5];
uniform vec3 viewDir[5];
uniform vec3 viewLoc[5];
uniform vec3 camLoc;
uniform vec3 camDir;

uniform sampler2D depthTexture[5];
uniform float minDepth[5];
uniform float maxDepth[5];
uniform sampler2D confidenceTexture[5];

//Proportionality constants for gaussian weights
uniform float kdt;
uniform float kd;
uniform float kt;
uniform float kc;
uniform float kdist;

float weight(float d2, float x, float c) { //Returns the weighing of a view given squared distance, angle, and shadow map confidence
	return exp((-d2*x*x*kdt - d2*kd - x*x*kt - c*c*kc));
}

float cameraDepth(vec4 tex, int i) {
	return dot(tex, vec4(1,256,65536,16777216))/16777216.0 * (maxDepth[i]-minDepth[i]) + minDepth[i];
}

float camera(vec4 tex, int i) {
	return dot(tex, vec4(1,256,65536,16777216))/16777216.0 * (maxDepth[i]-minDepth[i]) + minDepth[i];
}

float near = 0.1; 
float far  = 100.0; 
  
float LinearizeDepth(float depth) 
{
    float z = depth * 2.0 - 1.0; // back to NDC 
    return (2.0 * near * far) / (far + near - z * (far - near));	
}

void main() {
	gl_Position = MVP * vec4(vertexPosition_modelspace, 1);

	//viewParts = vec2( viewDir[0], viewDir2[0] );

	vec2 pos = (gl_Position.xy/gl_Position.w); //This is the screen position in the [-1,1] square.

	vec2 maxXPos = pos.xy+vec2(0.01,0);
	vec2 maxYPos = pos.xy+vec2(0,0.01);
	vec4 maxXdpos,maxYdpos;
	
	//vec4 xDir = inverse(MVP)*vec4(0.01,0,0,0);
	//vec4 yDir = inverse(MVP)*vec4(0,0.01,0,0);

	maxXdpos = inverse(MVP) * vec4(maxXPos*gl_Position.w, gl_Position.z, gl_Position.w);
	maxYdpos = inverse(MVP) * vec4(maxYPos*gl_Position.w, gl_Position.z, gl_Position.w);

	vec4 dxview,dyview;
	vec4 viewPos;
	vec2 dUVx,dUVy;
	//Confidence and depth map distance
	float c,d;

	float totalViewPart = 0;
	
	for(int i=0;i<5;i++) {
		dxview = viewMVP[i] * maxXdpos;
		dyview = viewMVP[i] * maxYdpos;
	
		viewPos = viewMVP[i] * vec4(vertexPosition_modelspace,1);
		dUVx = (dxview.xy/dxview.w)-viewPos.xy/viewPos.w;
		dUVy = (dyview.xy/dyview.w)-viewPos.xy/viewPos.w;

		float d2 = dot(viewLoc[i]-camLoc,viewLoc[i]-camLoc);
		float x = acos(dot(viewDir[i],camDir));

		d = abs(LinearizeDepth( texture(depthTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2).x ) - viewPos.w*1.1); 
		//d = abs(texture(depthTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2).r-(viewPos.z/viewPos.w*0.5 + 0.5));
		c = texture(confidenceTexture[i], (viewPos.xy/viewPos.w+vec2(1))/2).x;

		//d = abs(cameraDepth( texture(depthTexture[i], (viewPos.xy/viewPos.z+vec2(1))/2), i ) - viewPos.z); 

		viewParts[i] = clamp( weight(d2,x, c)  - pow(  viewPos.x/viewPos.w*viewPos.x/viewPos.w, 64) - pow(viewPos.y/viewPos.w*viewPos.y/viewPos.w, 64)  - pow(d*kdist,64) ,0,1);
		totalViewPart += viewParts[i];
		UVs[i] = ((viewPos.xy/viewPos.w)+vec2(1,1))/2;
		dUV[i] = mat2(dUVx,dUVy)*100;
	}

	for(int i=0;i<5;i++) {
		viewParts[i] = clamp(viewParts[i]/totalViewPart, 0, 1);
	}
	viewPos = viewMVP[0] * vec4(vertexPosition_modelspace, 1);
	//viewParts[0] = (((viewPos.xy/viewPos.z+vec2(1))/4).x+((viewPos.xy/viewPos.z+vec2(1))/4).y);
	//viewParts[1] = texture(confidenceTexture[0], (viewPos.xy/viewPos.z+vec2(1))/2).x;
	d = abs(LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).r ) ); 
	//viewParts[2] = abs(texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).r-(viewPos.z/viewPos.w*0.50 + 0.5))*100;
	//viewParts[0] = (LinearizeDepth(texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).r))/5;
	//viewParts[1] = viewPos.w/5;
	//viewParts[2] = (viewParts[1]/viewParts[0]);

	//viewParts[1] = clamp(viewPos.w/10, 0, 1);
	//viewParts[4] = clamp(d/10,0,1);
	/*
	viewParts[0] = abs(LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.z+vec2(1))/2).x )*0.8 - viewPos.z); 
	viewPos = viewMVP[1] * vec4(vertexPosition_modelspace, 1);
	viewParts[1] = abs(LinearizeDepth( texture(depthTexture[1], (viewPos.xy/viewPos.z+vec2(1))/2).x )*0.8 - viewPos.z); 
	viewPos = viewMVP[2] * vec4(vertexPosition_modelspace, 1);
	viewParts[2] = abs(LinearizeDepth( texture(depthTexture[2], (viewPos.xy/viewPos.z+vec2(1))/2).x )*0.8 - viewPos.z); */
	//TESTING!!!!
	//c = texture(confidenceTexture[0], (viewPos.xy/viewPos.z+vec2(1))/2).x;
	//viewParts[0] = clamp(c,0,1);
	//d = abs(LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.z+vec2(1))/2).x )*0.8 - viewPos.z); 
	//viewParts[1] = clamp(d,0,1);
	//viewParts[0] = clamp((LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).x )*0.8 -viewPos.z),0,1);
	//viewParts[1] = -clamp((LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).x )*0.8 -viewPos.z),-1,0);
	//viewParts[1] = clamp(viewPos.z,0,1);
	//viewParts[2] = clamp((LinearizeDepth( texture(depthTexture[0], (viewPos.xy/viewPos.w+vec2(1))/2).x )/8),0,1);
	vertexxy = (pos+vec2(1))/2;


	vColor = color;
	//gl_Position = viewPos;
}



/*for(int i=0;i<5;i++) {
	
}*/

/*
		maxXdpos = vec4(vertexPosition_modelspace+xDir.xyz,1);
		maxYdpos = vec4(vertexPosition_modelspace+yDir.xyz,1);
		
		dxview = viewMVP[i] * maxXdpos;
		dyview = viewMVP[i] * maxYdpos;
		gl_Position = MVP * maxYdpos;
		viewPos = viewMVP[i] * vec4(vertexPosition_modelspace,1);
		dUVx = (dxview.xy/dxview.w)-viewPos.xy/viewPos.w;
		dUVy = (dyview.xy/dyview.w)-viewPos.xy/viewPos.w;

		float d2 = dot(viewLoc[i]-camLoc,viewLoc[i]-camLoc);
		float x = acos(dot(viewDir[i],camDir));

		
		d = abs(cameraDepth( texture(depthTexture[0], (viewPos.xy/viewPos.z+vec2(1))/2), 0 ) - viewPos.z);

		viewParts[i] = clamp(weight(d2,x)  - pow(  viewPos.x/viewPos.z*viewPos.x/viewPos.z, 64) - pow(viewPos.y/viewPos.z*viewPos.y/viewPos.z, 64)  - pow(d*3,4) ,0,1);
		totalViewPart += viewParts[i];
		UVs[i] = ((viewPos.xy/viewPos.w)+vec2(1,1))/2;
		dUV[i] = mat2(dUVx,dUVy);
		*/